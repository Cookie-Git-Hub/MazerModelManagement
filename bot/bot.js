// bot/bot.js
const axios = require("axios");
const FormData = require("form-data"); 
const { telegramToken, chatId, URL} = require("../config");
const TELEGRAM_API = `https://api.telegram.org/bot${telegramToken}`;
const { Telegraf } = require("telegraf");
const bot = new Telegraf(telegramToken);

bot.start((ctx) => {
  ctx.reply("üá∫üá∏Click the button below to fill out the form. \nüá∫üá¶–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —â–æ–± –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É.", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "Open form",
            web_app: { url: URL },
            // web_app: { url: "mazer-model-management-d8442e8f971d.herokuapp.com" },
          },
        ],
      ],
    },
  });
});



bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  
  if (data === 'disabled') {
    await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.', { show_alert: true });
    return; 
  }

  const [action, contact, lang] = data.split(':');

  let responseMessage;
  let updatedButtons;

  if (action === 'accept') {
    responseMessage = lang === 'ua'
      ? "–í—ñ—Ç–∞—é, –∑–∞–ø—Ä–æ—à—É—î–º–æ –¥–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ, –Ω–∞—à –∞–≥–µ–Ω—Ç –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è"
      : "Congratulations, we invite you to cooperate. Our agent will be in contact with you soon";
    updatedButtons = [
      [{ text: "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω", callback_data: 'disabled' }]
    ];
  } else if (action === 'reject') {
    responseMessage = lang === 'ua'
      ? "–í–∏–±–∞—á—Ç–µ, –≤–∏ –Ω–∞–º –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ."
      : "Sorry, you are not suitable for us.";
    updatedButtons = [
      [{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data: 'disabled' }]
    ];
  }

  try {
    await ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${responseMessage}`);
    
    await ctx.editMessageReplyMarkup({
      inline_keyboard: updatedButtons,
    });

    await bot.telegram.sendMessage(contact, responseMessage, {
      parse_mode: "HTML"
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏:", error);
  }
});


bot.launch();

async function sendMessageToTelegram(data, files) {
  const messageText = `üìã–ü–æ–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞üìã\n <b>–ò–º—è:</b> ${data.name}\n <b>–†–æ—Å—Ç:</b> ${data.height}\n <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${data.age}\n <b>–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> ${data.nationality}\n <b>–ü—Ä–æ–∂–∏–≤–∞–µ—Ç:</b> ${data.based}\n <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b> ${data.bust}/${data.waist}/${data.hips}\n <b>Instagram:</b> ${data.instagram_link}\n <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b> ${data.contact}\n <b>–û —Å–µ–±–µ:</b> ${data.about}`;
  
  await axios.post(`${TELEGRAM_API}/sendMessage`, {
    chat_id: chatId,
    text: messageText,
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: `accept:${data.userID}:${data.language}` },
          { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject:${data.userID}:${data.language}` }
        ]
      ]
    }
  });


  const photos = [];
  const videos = [];

  files.forEach((file) => {
    const fileType = file.mimetype.split('/')[0];

    if (fileType === 'image') {
      photos.push(file);
    } else if (fileType === 'video') {
      videos.push(file);
    }
  });

  const mediaGroup = [];

    photos.forEach((file, index) => {
      mediaGroup.push({
        type: 'photo',
        media: `attach://${file.originalname}`,
        caption: index === 0 ? '' : messageText, 
        parse_mode: "HTML",
      });
    });

    videos.forEach((file, index) => {
      mediaGroup.push({
        type: 'video',
        media: `attach://${file.originalname}`,
        caption: index === 0 ? '' : messageText,
        parse_mode: "HTML",
      });
    });

  const formData = new FormData();
  formData.append('chat_id', chatId);
  formData.append('media', JSON.stringify(mediaGroup));

  [...photos, ...videos].forEach((file) => {
    formData.append(file.originalname, file.buffer, file.originalname);
  });

  await axios.post(`${TELEGRAM_API}/sendMediaGroup`, formData, {
    headers: formData.getHeaders(),
  }).catch((error) => {
    console.error('Error sending files to Telegram:', error);
  });

}

module.exports = { sendMessageToTelegram };
